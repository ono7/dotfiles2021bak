# use longest match first in regex patterns

global !p

# this helper functions are global

def _parse_comments(s):
    """ Parses vim's comments option to extract comment format """
    i = iter(s.split(","))

    rv = []
    try:
        while True:
            # get the flags and text of a comment part
            flags, text = next(i).split(":", 1)

            if len(flags) == 0:
                rv.append(("OTHER", text, text, text, ""))
            # parse 3-part comment, but ignore those with O flag
            elif "s" in flags and "O" not in flags:
                ctriple = ["TRIPLE"]
                indent = ""

                if flags[-1] in string.digits:
                    indent = " " * int(flags[-1])
                ctriple.append(text)

                flags, text = next(i).split(":", 1)
                assert flags[0] == "m"
                ctriple.append(text)

                flags, text = next(i).split(":", 1)
                assert flags[0] == "e"
                ctriple.append(text)
                ctriple.append(indent)

                rv.append(ctriple)
            elif "b" in flags:
                if len(text) == 1:
                    rv.insert(0, ("SINGLE_CHAR", text, text, text, ""))
    except StopIteration:
        return rv


def get_comment_format():
    """ Returns a 4-element tuple (first_line, middle_lines, end_line, indent)
    representing the comment format for the current file.
    It first looks at the 'commentstring', if that ends with %s, it uses that.
    Otherwise it parses '&comments' and prefers single character comment
    markers if there are any.
    """
    commentstring = vim.eval("&commentstring")
    if commentstring.endswith("%s"):
        c = commentstring[:-2]
        return (c.rstrip(), c.rstrip(), c.rstrip(), "")
    comments = _parse_comments(vim.eval("&comments"))
    for c in comments:
        if c[0] == "SINGLE_CHAR":
            return c[1:]
    return comments[0][1:]


def make_box(twidth, bwidth=None):
    b, m, e, i = (s.strip() for s in get_comment_format())
    bwidth_inner = bwidth - 3 - max(len(b), len(i + e)) if bwidth else twidth + 2
    sline = b + m + bwidth_inner * m[0] + 2 * m[0]
    nspaces = (bwidth_inner - twidth) // 2
    mlines = i + m + " " + " " * nspaces
    mlinee = " " + " " * (bwidth_inner - twidth - nspaces) + m
    eline = i + m + bwidth_inner * m[0] + 2 * m[0] + e
    return sline, mlines, mlinee, eline


def foldmarker():
    "Return a tuple of (open fold marker, close fold marker)"
    return vim.eval("&foldmarker").split(",")


def display_width(str):
    """Return the required over-/underline length for str."""
    try:
        # Respect &ambiwidth and &tabstop, but old vim may not support this
        return vim.strdisplaywidth(str)
    except AttributeError:
        # Fallback
        from unicodedata import east_asian_width

        result = 0
        for c in str:
            result += 2 if east_asian_width(c) in ("W", "F") else 1
        return result

endglobal

snippet bbox "A nice box over the full width" b
`!p

if not snip.c:
    width = int(vim.eval("&textwidth - (virtcol('.') == 1 ? 0 : virtcol('.'))")) or 71
box = make_box(len(t[1]), width)
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]), width)
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

snippet box "A nice box with the current comment symbol" b
`!p
box = make_box(len(t[1]))
snip.rv = box[0]
snip += box[1]
`${1:${VISUAL:content}}`!p
box = make_box(len(t[1]))
snip.rv = box[2]
snip += box[3]`
$0
endsnippet

# snippet todo "Todo reminder" b
# # TODO: ${VISUAL/(\n|\s+)/ /g}$0, `!v strftime("%m-%d-%Y %I:%M %p %Z")` <lima>
# endsnippet
snippet f "function(contents)"
$0(${VISUAL})
endsnippet

snippet d "Todo mark done" b
${VISUAL/(TODO:)/âœ” DONE:/g}$0
endsnippet

# snippet todo "TODO comment" bw
# `!p snip.rv=get_comment_format()[0]` TODO: `!v strftime('%m-%d-%Y %I:%M %p %Z')` | ${VISUAL}${1}$0 | ${2:lima} `!p snip.rv=get_comment_format()[2]`
# endsnippet

snippet todo "TODO comment" bw
`!p snip.rv=get_comment_format()[0]` TODO: `!v strftime('%m-%d-%Y')` | ${VISUAL}${1}$0
endsnippet

snippet date "insert date"
`!v strftime("%m-%d-%Y")`
endsnippet

snippet datet "YYYY-MM-DD hh:mm" w
`!v strftime("%m-%d-%Y %I:%M:%S %p")`
endsnippet

snippet ddate "Month DD, YYYY" w
`!v strftime("%b %d, %Y")`
endsnippet

snippet diso "ISO format datetime" w
`!v strftime("%Y-%m-%d %H:%M:%S%z")`
endsnippet

snippet time "hh:mm" w
`!v strftime("%H:%M:%S")`
endsnippet



# xml declaration
snippet xml "xml def" b
<?xml version="1.0" encoding="UTF-8"?>
endsnippet

# tag
snippet t "xml tag" b
<${1:name="${VISUAL}$2"}>
    $3
</${1/(\w+).*/$1/}>
endsnippet

# inline tag
snippet ti "xml inline tag" b
<${1:name="${VISUAL}$2"}>$3</${1/(\w+).*/$1/}>
endsnippet

snippet te "xml inline tag" b
<${1:entry name="${VISUAL}$2"}/>
endsnippet

snippet pt "xml snippet for pano" b
<${1:entry name="${VISUAL}$2"}>
    $3
</${1/(\w+).*/$1/}>
endsnippet

snippet pti "pano member tag" b
    <${1:member}>${VISUAL}$2</$1>
endsnippet
